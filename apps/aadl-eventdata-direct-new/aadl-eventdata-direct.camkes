/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * Copyright 2019 Adventium Labs
 * Modifications made to original
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_Adventium_BSD)
 */
#include <configurations/vm.h>

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <seL4VMDTBPassthrough.idl4>;
import <FileServerInterface.camkes>;
import <FileServer/FileServer.camkes>;
import <SerialServer/SerialServer.camkes>;
import <TimeServer/TimeServer.camkes>;
import <vm-connectors.camkes>;
import <devices.camkes>;

import "components/Receiver/Receiver.camkes";
import "components/Sender/Sender.camkes";


component VM {
    VM_INIT_DEF()
    include <queue.h>;
    dataport queue_t crossvm_dp_0;
    emits SendEvent ready;
    maybe consumes SendEvent done;
}


assembly {
    composition {

        // Scenario 1: Native sender and receiver
        // component Receiver receiver;
        // component Sender sender;

        // // AADL Event Data Port connection representation from sender.p1_out to reciever.p1_in
        // connection seL4Notification pc1_event(from sender.p1_out_SendEvent, to receiver.p1_in_SendEvent);
        // connection seL4SharedData pc1_queue(from sender.p1_out_queue, to receiver.p1_in_queue);


        // Scenario 2: Nativer sender, VM receiver
        // component Sender sender;
        // VM_GENERAL_COMPOSITION_DEF()
        // component VM vm1;
        // VM_COMPONENT_CONNECTIONS_DEF(1)
        // /* vm serial connections */
        // VM_VIRTUAL_SERIAL_COMPOSITION_DEF(1)

        // connection seL4GlobalAsynch event_conn_1(from sender.p1_out_SendEvent, to vm1.done);
        // connection seL4SharedDataWithCaps cross_vm_conn_1(from sender.p1_out_queue, to vm1.crossvm_dp_0);
        // connection seL4VMDTBPassthrough vm_dtb1(from vm1.dtb_self, to vm1.dtb);

        // Scenario 3: VM Sender, Native receiver
        // component Receiver receiver;
        // VM_GENERAL_COMPOSITION_DEF()
        // component VM vm2;
        // VM_COMPONENT_CONNECTIONS_DEF(2)
        // /* vm serial connections */
        // VM_VIRTUAL_SERIAL_COMPOSITION_DEF(2)

        // connection seL4Notification event_conn_1(from vm2.ready, to receiver.p1_in_SendEvent);
        // connection seL4SharedDataWithCaps cross_vm_conn_1(from vm2.crossvm_dp_0,  to receiver.p1_in_queue);
        // connection seL4VMDTBPassthrough vm_dtb1(from vm2.dtb_self, to vm2.dtb);



        // Scenario 4: VM Sender and VM receiver
        VM_GENERAL_COMPOSITION_DEF()

        component VM vm1;
        VM_COMPONENT_CONNECTIONS_DEF(1)
        component VM vm2;
        VM_COMPONENT_CONNECTIONS_DEF(2)
        /* vm serial connections */
        VM_VIRTUAL_SERIAL_COMPOSITION_DEF(1,2)

        connection seL4GlobalAsynch event_conn_1(from vm2.ready, to vm1.done);
        connection seL4SharedDataWithCaps cross_vm_conn_0(from vm2.crossvm_dp_0, to vm1.crossvm_dp_0);
        connection seL4VMDTBPassthrough vm_dtb(from vm1.dtb_self, to vm1.dtb);
        connection seL4VMDTBPassthrough vm_dtb1(from vm2.dtb_self, to vm2.dtb);


    }
    configuration {

        sender.p1_out_queue_access = "W";
        receiver.p1_in_queue_access = "R";
        sender._priority = 50;
        receiver._priority = 50;

        vm1.crossvm_dp_0 = "R";
        vm2.crossvm_dp_0 = "W";
        VM_GENERAL_CONFIGURATION_DEF()
        VM_CONFIGURATION_DEF(1)
        VM_CONFIGURATION_DEF(2)
        VM_VIRTUAL_SERIAL_CONFIGURATION_DEF(1,2)

        vm1.cnode_size_bits = 18;
        vm1.simple_untyped21_pool = 12;
        vm1.simple_untyped12_pool = 12;
        vm1.num_extra_frame_caps = 0;
        vm1.extra_frame_map_address = 0;
        vm2.cnode_size_bits = 18;
        vm2.simple_untyped21_pool = 12;
        vm2.simple_untyped12_pool = 12;
        vm2.num_extra_frame_caps = 0;
        vm2.extra_frame_map_address = 0;

    }
}
