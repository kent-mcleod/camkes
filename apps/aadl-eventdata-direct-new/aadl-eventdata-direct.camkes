/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * Copyright 2019 Adventium Labs
 * Modifications made to original
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_Adventium_BSD)
 */
#include <configurations/vm.h>

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <seL4VMDTBPassthrough.idl4>;
import <FileServerInterface.camkes>;
import <FileServer/FileServer.camkes>;
import <SerialServer/SerialServer.camkes>;
import <TimeServer/TimeServer.camkes>;
import <vm-connectors.camkes>;
import <devices.camkes>;

import "components/Receiver/Receiver.camkes";
import "components/Sender/Sender.camkes";

connector CASE_AADL_EventDataport {
    from Dataport with 0 threads;
    to Dataports;
    attribute bool to_global_endpoint = True;
}

component VMSender {
    VM_INIT_DEF()
    include <queue.h>;
    dataport queue_t crossvm_sender;
}


component VMReceiver {
    VM_INIT_DEF()
    include <queue.h>;
    dataport queue_t crossvm_receiver;
}


assembly {
    composition {

        // Scenario 1: VM Sender and VM receiver and native receiver
        VM_GENERAL_COMPOSITION_DEF()

        component VMReceiver vmReceiver;
        VM_COMPONENT_CONNECTIONS_DEF(Receiver)
        component VMSender vmSender;
        VM_COMPONENT_CONNECTIONS_DEF(Sender)
        component Receiver receiver;
        /* vm serial connections */
        VM_VIRTUAL_SERIAL_COMPOSITION_DEF(Receiver,Sender)
        connection CASE_AADL_EventDataport event_conn_1(from vmSender.crossvm_sender, to vmReceiver.crossvm_receiver, to receiver.p1_in_queue);

        connection seL4VMDTBPassthrough vm_dtb(from vmReceiver.dtb_self, to vmReceiver.dtb);
        connection seL4VMDTBPassthrough vm_dtb1(from vmSender.dtb_self, to vmSender.dtb);

        // // Scenario 2: Native Sender and VM receiver and native receiver
        // VM_GENERAL_COMPOSITION_DEF()

        // component VMReceiver vmReceiver;
        // VM_COMPONENT_CONNECTIONS_DEF(Receiver)
        // component Receiver receiver;
        // component Sender sender;
        // /* vm serial connections */
        // VM_VIRTUAL_SERIAL_COMPOSITION_DEF(Receiver)
        // connection CASE_AADL_EventDataport event_conn_1(from sender.p1_out_queue, to vmReceiver.crossvm_receiver, to receiver.p1_in_queue);

        // connection seL4VMDTBPassthrough vm_dtb(from vmReceiver.dtb_self, to vmReceiver.dtb);



    }
    configuration {

        vmReceiver.crossvm_receiver_type = "vm";
        vmSender.crossvm_sender_type = "vm";
        receiver.p1_in_queue_type = "native";
        sender.p1_out_queue = "native";
        event_conn_1.with_signalling = true;
        event_conn_1.size = 8192;

        sender._priority = 50;
        sender._domain = 1;
        receiver._priority = 50;
        receiver._domain = 0;
        receiver.p1_in_SendEvent_domain = 2;
        VM_GENERAL_CONFIGURATION_DEF()
        VM_CONFIGURATION_DEF(Receiver)
        VM_CONFIGURATION_DEF(Sender)
        VM_VIRTUAL_SERIAL_CONFIGURATION_DEF(Receiver,Sender)
        VM_DOMAIN_CONFIGURATION_DEF(Sender, 1)
        VM_DOMAIN_CONFIGURATION_DEF(Receiver, 2)


        vmReceiver.cnode_size_bits = 18;
        vmReceiver.simple_untyped21_pool = 12;
        vmReceiver.simple_untyped12_pool = 12;
        vmReceiver.num_extra_frame_caps = 0;
        vmReceiver.extra_frame_map_address = 0;
        vmSender.cnode_size_bits = 18;
        vmSender.simple_untyped21_pool = 12;
        vmSender.simple_untyped12_pool = 12;
        vmSender.num_extra_frame_caps = 0;
        vmSender.extra_frame_map_address = 0;

    }
}
